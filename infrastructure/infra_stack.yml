AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for DynamoDB tables

Resources:
  ChatsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: chats
      AttributeDefinitions:
        - AttributeName: chat_id
          AttributeType: S
      KeySchema:
        - AttributeName: chat_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ConnectionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: connections
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
        - AttributeName: user
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-index
          KeySchema:
            - AttributeName: user
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  FriendlistTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: friendlist
      AttributeDefinitions:
        - AttributeName: user
          AttributeType: S
      KeySchema:
        - AttributeName: user
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  UserDetailsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: user-details
      AttributeDefinitions:
        - AttributeName: user
          AttributeType: S
      KeySchema:
        - AttributeName: user
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  AddFriendLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: addFriendLambda_iac
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ReadWriteFriendList
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt FriendlistTable.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ConnectDisconnectSocketLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ConnectDisconnectSocketLambda_iac
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ReadWriteConnectionsDynamoDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt ConnectionTable.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GetChatMessagesRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: getChatMessages_iac
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ReadChatsDynamoDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !GetAtt ChatsTable.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GetFriendsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: getFriendsLambda_iac
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GetTranslationLangsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: getTranslationLangsLambda_iac
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ListTranslationLangs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - translate:ListLanguages
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GetUserDetailsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: getUserDetails_iac
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ReadUserDetailsLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !GetAtt UserDetailsTable.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SendMessageLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: sendMessageLambda_iac
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: QueryConnectionsDynamoDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:Query
                Resource: !GetAtt ConnectionTable.Arn
              - Effect: Allow
                Action: dynamodb:Query
                Resource: !Sub "${ConnectionTable.Arn}/index/user-index"
        - PolicyName: ReadWriteChatsDynamoDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt ChatsTable.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  TranslateTextLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: translateTextLambda_iac
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DetectLanguageComprehend
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - comprehend:DetectDominantLanguage
                Resource: "*"
        - PolicyName: ReadTranslateText
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - translate:TranslateText
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  
  Smit0086ProfilePicsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: smit0086-profile-pics
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

  Smit0086ProfilePicsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Smit0086ProfilePicsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "PublicReadGetObject"
            Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${Smit0086ProfilePicsBucket}/*"

  UploadProfilePictureLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: uploadProfilePictureLambda_iac
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PutObjectToProfilePicsLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub "arn:aws:s3:::${Smit0086ProfilePicsBucket}/*"
        - PolicyName: AccessUserDetailsTable
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt UserDetailsTable.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DemoPoolIac:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: "demo-pool-iac"
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
        Schema:
          - Name: name
            Required: true
            Mutable: true
          - Name: email
            Required: true
            Mutable: true
            AttributeDataType: String
            DeveloperOnlyAttribute: false
            StringAttributeConstraints:
              MinLength: "0"
              MaxLength: "2048"
        AutoVerifiedAttributes:
          - email
        EmailVerificationSubject: "Your verification code"
        EmailVerificationMessage: "Your verification code is {####}."
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        UsernameAttributes:
          - email
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
          InviteMessageTemplate:
            EmailMessage: "Your username is {username} and temporary password is {####}."
            EmailSubject: "Your temporary password"
        MfaConfiguration: "OFF"

  DemoAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref DemoPoolIac
      ClientName: "demo"

  LambdaDependencyLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: "DependencyLayer"
      Description: "Python 3.8 dependencies layer for my functions"
      Content: 
        S3Bucket: "term-project-lamdas"
        S3Key: "layer/python.zip"
      CompatibleRuntimes: 
        - python3.8
      CompatibleArchitectures:
        - x86_64

  TermProjectRestApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "term-project-rest-api-iac"
      Description: "API Gateway for term project"
      EndpointConfiguration:
        Types:
          - "REGIONAL"
      BinaryMediaTypes:
        - "multipart/form-data"

  GetUserFriendsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "getUserFriends_iac"
      Handler: "getUserFriends.lambda_handler"  # Update this based on your function's entry point
      Runtime: python3.8
      Code:
        S3Bucket: "term-project-lamdas"  # Replace with your actual bucket name
        S3Key: "functions/getUserFriends.zip"  # Replace with the actual S3 key
      Layers:
        - !Ref LambdaDependencyLayer
      Role: !GetAtt GetFriendsLambdaRole.Arn

  getChatMessages:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "getChatMessages_iac"
      Handler: "getChatMessages.lambda_handler"  # Update this based on your function's entry point
      Runtime: python3.8
      Code:
        S3Bucket: "term-project-lamdas"  # Replace with your actual bucket name
        S3Key: "functions/getChatMessages.zip"  # Replace with the actual S3 key
      Layers:
        - !Ref LambdaDependencyLayer
      Role: !GetAtt GetChatMessagesRole.Arn

  getChatMessagesLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref getChatMessages
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TermProjectRestApiGateway}/*"

  sendMessage:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "sendMessage_iac"
      Handler: "sendMessage.lambda_handler"  # Update this based on your function's entry point
      Runtime: python3.8
      Code:
        S3Bucket: "term-project-lamdas"  # Replace with your actual bucket name
        S3Key: "functions/sendMessage.zip"  # Replace with the actual S3 key
      Layers:
        - !Ref LambdaDependencyLayer
      Role: !GetAtt SendMessageLambdaRole.Arn

  sendMessageLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref sendMessage
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TermProjectRestApiGateway}/*"

  addFriend:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "addFriend_iac"
      Handler: "addFriend.lambda_handler"  # Update this based on your function's entry point
      Runtime: python3.8
      Code:
        S3Bucket: "term-project-lamdas"  # Replace with your actual bucket name
        S3Key: "functions/addFriend.zip"  # Replace with the actual S3 key
      Layers:
        - !Ref LambdaDependencyLayer
      Role: !GetAtt AddFriendLambdaRole.Arn

  addFriendLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref addFriend
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TermProjectRestApiGateway}/*"

  getUserDetails:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "getUserDetails_iac"
      Handler: "getUserDetails.lambda_handler"  # Update this based on your function's entry point
      Runtime: python3.8
      Code:
        S3Bucket: "term-project-lamdas"  # Replace with your actual bucket name
        S3Key: "functions/getUserDetails.zip"  # Replace with the actual S3 key
      Layers:
        - !Ref LambdaDependencyLayer
      Role: !GetAtt GetUserDetailsRole.Arn

  getUserDetailsLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref getUserDetails
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TermProjectRestApiGateway}/*" 

  addProfilePicture:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "addProfilePicture_iac"
      Handler: "addProfilePicture.lambda_handler"  # Update this based on your function's entry point
      Runtime: python3.8
      Code:
        S3Bucket: "term-project-lamdas"  # Replace with your actual bucket name
        S3Key: "functions/addProfilePicture.zip"  # Replace with the actual S3 key
      Layers:
        - !Ref LambdaDependencyLayer
      Role: !GetAtt UploadProfilePictureLambdaRole.Arn

  addProfilePictureLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref addProfilePicture
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TermProjectRestApiGateway}/*" 

  getTranslationLangs:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "getTranslationLangs_iac"
      Handler: "getTranslationLangs.lambda_handler"  # Update this based on your function's entry point
      Runtime: python3.8
      Code:
        S3Bucket: "term-project-lamdas"  # Replace with your actual bucket name
        S3Key: "functions/getTranslationLangs.zip"  # Replace with the actual S3 key
      Layers:
        - !Ref LambdaDependencyLayer
      Role: !GetAtt GetTranslationLangsLambdaRole.Arn

  getTranslationLangsLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref getTranslationLangs
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TermProjectRestApiGateway}/*" 

  translateText:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "translateText_iac"
      Handler: "translateText.lambda_handler"  # Update this based on your function's entry point
      Runtime: python3.8
      Code:
        S3Bucket: "term-project-lamdas"  # Replace with your actual bucket name
        S3Key: "functions/translateText.zip"  # Replace with the actual S3 key
      Layers:
        - !Ref LambdaDependencyLayer
      Role: !GetAtt TranslateTextLambdaRole.Arn

  translateTextLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref translateText
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TermProjectRestApiGateway}/*" 

  ChatResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ParentId: !GetAtt TermProjectRestApiGateway.RootResourceId
      PathPart: 'chat'

  ChatGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref ChatResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getChatMessages.Arn}/invocations

  ChatPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref ChatResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${sendMessage.Arn}/invocations

  ChatOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref ChatResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                {}
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  FriendsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ParentId: !GetAtt TermProjectRestApiGateway.RootResourceId
      PathPart: "friends"

  FriendsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref FriendsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                {}
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  GetFriendsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref FriendsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserFriendsFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200

  LambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref GetUserFriendsFunction
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TermProjectRestApiGateway}/*"

  FriendsAddResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ParentId: !Ref FriendsResource
      PathPart: 'add'

  FriendsAddPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref FriendsAddResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${addFriend.Arn}/invocations

  FriendsAddOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref FriendsAddResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                {}
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  ProfileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ParentId: !GetAtt TermProjectRestApiGateway.RootResourceId
      PathPart: 'profile'

  ProfileGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref ProfileResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getUserDetails.Arn}/invocations

  ProfileOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref ProfileResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                {}
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  ProfilePictureResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ParentId: !Ref ProfileResource
      PathPart: 'picture'

  ProfilePicturePost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref ProfilePictureResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${addProfilePicture.Arn}/invocations

  ProfilePictureOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref ProfilePictureResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                {}
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  TranslationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ParentId: !GetAtt TermProjectRestApiGateway.RootResourceId
      PathPart: 'translation'

  TranslationOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref TranslationResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                {}
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  TranslationLanguagesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ParentId: !Ref TranslationResource
      PathPart: 'languages'

  TranslationLanguagesGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref TranslationLanguagesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getTranslationLangs.Arn}/invocations

  TranslationLanguagesOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref TranslationLanguagesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                {}
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  TranslationTranslateResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ParentId: !Ref TranslationResource
      PathPart: 'translate'

  TranslationTranslatePost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref TranslationTranslateResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${translateText.Arn}/invocations

  TranslationTranslateOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      ResourceId: !Ref TranslationTranslateResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                {}
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref TermProjectRestApiGateway
      StageName: dev
    DependsOn:
      - ChatGet
      - ChatPost
      - ChatOptions
      - GetFriendsMethod
      - FriendsOptionsMethod
      - FriendsAddPost
      - FriendsAddOptions
      - ProfileGet
      - ProfileOptions
      - ProfilePicturePost
      - ProfilePictureOptions
      - TranslationLanguagesGet
      - TranslationLanguagesOptions
      - TranslationTranslatePost
      - TranslationTranslateOptions